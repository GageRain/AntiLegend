#include <stdio.h>  //io: input/output
#include <stdlib.h>
#include <math.h>

int main(){
	
	//1字节（byte）=8位（bit）
		
		/*
		 * 关于数据类型，C语言和C++有不同版本的分类，这里说明的分类不一定在所有教程书都是一样的。 
		 
		 * 数据类型可以分为基本类型、构造类型、指针类型、空类型（void）、函数类型 
		 
		 （函数类型算不算数据暂时存疑）（可能还有其他的类型，但我不认识了） 
		 
		 * 基本类型还可分为定点类型和浮点类型；
		*/
		
		
		/*
		 * 关于基本类型的数据类型转化：
		 * 默认优先级：short/char-int-long-float-double
		 * 其中short/char相互之间默认不转化，如果他们之间做运算会首先转化为int
		 （注意，这意味着两个short类型做加法会转化为int类型）
		 
		 * 注：可以强制转换数据类型，但可能损失精度，如: 
		 		double a = 1.0; 
				fload b = (float)a; 
		*/
		
		
		
		
	//（一）基本类型
		 
			//(A)定点类型
		
				//(a)整数类型
			
					//①整数常量：如100, 20 
				
					//②整数变量： 可分成――整型变量、短整型变量和长整型变量。
		
		
		//拓展：要知道一个变量占用几个字节，可运用sizeof运算，例如：
		//      若要求整数类型的字节数，可声明int a = sizeof(int); a即为所求 
		
		short a = 100; //短整型变量：占用2个字节，数据范围为-32768 ~ 32767（-2的15次方到2的15次方-1）
		
		
		int b = 1000; //整型变量：一般占用4个字节，数据范围为-2147483648 ~ 2147483647（-2的31次方到2的31次方-1）
		//一般一个整数默认为int格式
		
		long c = 10000; //长整型变量：一般占用8个字节，数据范围为-9223372036854774808 ~ 9223372036854774807（-2的63次方到2的63次方-1）
		
		
		//关于long类型暂时存疑，C语言和C++对long的范围似乎有不同的定义，貌似还存在一个long long int类型 
		
		printf("%d %d %d \n",a, b, c);
		
		
				//(b)字符类型（区分大小写，一个字符变量占2个字节，范围为-128 ~ 127）
			
					//①字符常量（''单引号括起来，其中只能加一个字符。注意'1'是字符常量，1是整数常量，二者不同）
		
					//②字符变量（char 定义的变量）
					
		char d = '1';

		
		printf("%c---", d);
		printf("---%d\n", d);
	
		
		
			//(B)浮点类型:float和double是表示浮点型的数据类型，他们之间的区别在于他们的精确度不同。
			
					//浮点型的数据是不能完全精确的，所以有的时候在计算的时候可能会在小数点最后几位出现浮动，这是正常的。
		
				//浮点类型划分和整数类型划分基本相同，均可分为常量和变量，故略。
		
		float g = 1.0f; //单精度浮点型：需要在最后加上f，占用4个字节，范围：可自行补充
		
		double h = 1.5d; //双精度浮点型：浮点数默认为double类型，占用8个字节，范围：可自行补充 
		
		
		printf("%f %lf\n", g, h)  //正常输出 
		printf("%.1f, %.3lf\n", g, h); //分别输出一位小数和三位小数，原先没有的数位用0补充，超出的数位会损失掉 
		
	//一般在程序中，我们采用double类型（双精度），但如果题目有特别要求，则采用float 
		
		
	//(二)构造类型――这里以数组为例 
		
		int x[5] = {1,2,3,4,5};  //整数数组 
		char y[5] = {'a','b','c','d','e'};  //字符数组 
		
		int i;
		
		for(i=0; i<=4; i++) { //循环输出数组元素 
			printf("x[%d]=%d  ",i, x[i]);
			printf("y[%d]=%c  \n",i, y[i]);
		}
		
	//（三）指针类型：其他数据类型调用的是变量的值，而指针调用的是变量存储的地址
	
		int p = 1; 		//p是一个整数类型 
		int *q = &p; 	//q是一个整数的指针类型。&为取址符，用来调用对应的地址（%可用来调用对应的值） 
		
		
	//（四）空类型：void（顾名思义，就是空的，啥都没有） 
	 
	 
	 
	/*
	 变量的命名规则（节选）（以下规则不是强制性的，只是不成文的行业潜规则）
	  
		1、命名应当直观且可以拼读，可望文知意，便于记忆和阅读。
		标识符最好采用英文单词或其组合，不建议使用拼音。程序中的英文单词一般不要太复杂，用词应当准确。
 
		2、命名的长度应当符合“min-length && max-information”原则。
		C语言是一种简洁的语言, 命名也应该是简洁的。例如变量名MaxVal 就比MaxValueUntilOverflow 好用。
		标识符的长度一般不要过长，较长的单词可通过去掉“元音”形成缩写。

		另外，英文词尽量不缩写，特别是非常用专业名词，如果有缩写，在同一系统中对同一单词必须使用相同的表示法，并且注明其意思。

		3、当标识符由多个词组成时，每个词的第一个字母大写，其余全部小写。比如：
		int CurrentVal；
		这样的名字看起来比较清晰，远比一长串字符好得多。

		4、尽量避免名字中出现数字编号，如Value1,Value2 等，除非逻辑上的确需要编号。比如驱动开发时为管脚命名，非编号名字反而不好。
		初学者总是喜欢用带编号的变量名或函数名，这样子看上去很简单方便，但其实是一颗颗定时炸弹。这个习惯初学者一定要改过来。
		
		5、程序中不建议出现仅靠大小写区分的相似的标识符 ，例如：
		int x, X;  //变量x与X 容易混淆 
		
		6、定义变量的同时千万别忘了初始化。 例如：
		int a[10] = {0}; 不要写成 int a[10]; 
		int x = 0; 不要写成 int x； 
		后者没有语法错误，但在大程序中可能产生BUG（小程序里无所谓） 
		定义变量时编译器并不一定清空了这块内存，它的值可能是无效的数据。这个问题在内存管理会有非常详细的讨论。 
	*/

	return 0;
} 
