#include "math.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"



//按位与&的作用：如果两个相应(注意是相应，不是每一位）的二进制位都为1，则该位的结果值为1，否则为0。 

int main()
{
	/*
	【作用示范】a,b,c的二进制分别为1,111111,111110，理论上x为1，y为0，z为62（二进制00111110）
	 
	int a = 1;  //二进制：00000001 
	int b = 63; //二进制：00111111 
	int c = 62; //二进制：00111110 
	
	int x = a & b; //理论结果：1 
	int y = a & c; //理论结果：0
	int z = b & c; //理论结果：62 
	
	printf("The outcome is that x=%d, y=%d, z=%d",x,y,z);

	*/
	
	//应用【一】清零
	
	/*
	若想对一个存储单元清零，即使其全部二进制位为0，只要对这个存储单元当前的值取反（反码） 
	(也就是原来的数中为1变为0，0变为1），然后使二者进行&运算，即可达到清零目的。 
	 
	int a1 = 99;
	int a2 = ~a1;  // 注：取反运算符为~ 
	int zero = a1 & a2;
	printf("zero = %d",zero);
	*/
	
	
	//应用【二】取得二进制中的指定位数
	
	/*
		比如23(二进制00010111），欲取二进制后4位数，那么可以找一个后4位是1其余位是0的数，
		即0x0f(十六进制，转换二进制为00001111,十进制为15),23&15就得到了23的后四位数码。	
	 
	
	int m = 23; //二进制：00010111
	int n = 15; //二进制：00001111
	
	int p = m & n;  //理论上输出数字为7（二进制00000111） 
	
	printf("%d",p);
	*/
	
	//应用【三】保留指定二进制数位(类似应用【二】） 
	/*
		比如23(用8bit表示)，欲保留其二进制的第4和第6位(这里记最左边为第1位)，其余位置0。
		那么可以找一个第4和第6位是1其余位是0的数与23进行按位与运算
	 
	
	int a3 = 23; //二进制：00010111
	int a4 = 20; //二进制：00010100
	
	a3 = a3 & a4; //理论结果为20，二进制：00010100 
	
	printf("最终结果 a3 = %d",a3); 
	*/
	
	return 0; 
}
