Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ? b ? c ? d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)


Attentions:
beware of the duplicate cases
1. pointer one. from start
2. pointer two . from end;
3. pointer three one +1 
4. pointer four two -1

Solution:

 public class Solution {
    public ArrayList<ArrayList<Integer>> fourSum(int[] num, int target) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(num == null || num.length <= 3){
            return res;
        }
        Arrays.sort(num);
        for(int i = 0 ; i < num.length - 3; i ++){
            if(i != 0 && num[i] == num[i - 1]){continue;}
            for(int j = num.length -1; j > i + 2; j--){
                if(j != num.length -1 && num[j] == num[j + 1]){continue;}
                int low = i + 1;
                int high = j -1;
                while(low < high){
                    if(low != i+1 && num[low] == num[low -1]){
                        low++;
                    }else if(high != j -1 && num[high] == num[high+1]){
                        high--;
                    }else{
                        int sum = num[i] + num[low] + num[high] + num[j];
                        if(sum == target){
                            ArrayList<Integer> adds = new ArrayList<Integer>();
                            adds.add(num[i]);
                            adds.add(num[low]);
                            adds.add(num[high]);
                            adds.add(num[j]);
                            res.add(adds);
                            high--;low++;
                        }else if(sum > target){
                            high--;
                        }else{
                            low++;
                        }
                    }                    
                }
            }
        }
        return res;
    }
}