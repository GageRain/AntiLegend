Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]

===============================

Solution:

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(root == null){
            return res;
        }
        Queue<TreeNode> ques = new LinkedList<TreeNode>();
        ques.add(root);
        int cnum = 1;
        int nnum = 0;
        List<Integer> adds = new ArrayList<Integer>();
        while(!ques.isEmpty()){
            TreeNode node = ques.poll();
            adds.add(node.val);
            cnum--;
            if(node.left != null){
                ques.add(node.left);
                nnum++;
            }
            if(node.right != null){
                ques.add(node.right);
                nnum++;
            }
            if(cnum == 0){
                cnum = nnum;
                nnum = 0;
                res.add(new ArrayList<Integer>(adds));
                adds.clear();
            }
        }
        return res;
    }   
}