Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

=======================================

take care:
use three pointer to exchange the node postion and update the pointer


Soltuion:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(head == null || head.next == null){
            return head;
        }
        ListNode f = null;
        ListNode s = null;
        ListNode p = null;
        f = head;
        s = head.next;
        p = head;
        head = s;
        while( s != null){
            f.next = s.next;
            s.next = f;
            if(p != f){
                p.next = s;
                p = f;
            }
            f = f.next;
            if( f!= null){
                s = f.next;
            }else{
                break;
            }
        }
        return head;
    }
}


////////////recurrence solution

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(head == null || head.next == null){
            return head;
        }
        ListNode pre = head;
        ListNode next = head.next.next;
        ListNode cur = head.next;
        cur.next = pre;
        pre.next = swapPairs(next);
        return cur;        
    }
}