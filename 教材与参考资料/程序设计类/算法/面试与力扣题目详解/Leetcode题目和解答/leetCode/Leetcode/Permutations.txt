//recursive solution
public class Solution {
    public ArrayList<ArrayList<Integer>> permute(int[] num) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(num == null || num.length == 0){
            return res;
        }
        ArrayList<Integer> adds = new ArrayList<Integer>();
        dfs(num,0,adds,res);
        return res;
    }
    void dfs(int[] num, int index, ArrayList<Integer> adds,ArrayList<ArrayList<Integer>> res){
        if(index == num.length){
            res.add(new ArrayList<Integer>(adds));
            return;
        }
        for(int i = index; i < num.length; i++){
            swap(num,index,i);
            adds.add(num[index]);
            dfs(num,index+1,adds,res);
            swap(num,index,i);
            adds.remove(adds.size() -1);
        }
    }
    void swap(int[] num, int ia, int ib){
        int tmp = num[ia];
        num[ia] = num[ib];
        num[ib] = tmp;
    }
}

///iterative solution
public class Solution {
    public ArrayList<ArrayList<Integer>> permute(int[] num) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> adds = new ArrayList<Integer>();
        
        if(num.length == 0){
            res.add(adds);
            return res;
        }
        adds.add(num[0]);
        res.add(adds);
        for(int i = 1; i < num.length; i++){
            ArrayList<ArrayList<Integer>> tres = new ArrayList<ArrayList<Integer>>();
            for(ArrayList<Integer> re : res){
                for(int j = 0 ;  j <= re.size(); j++){
                    ArrayList<Integer> tre = new ArrayList<Integer>(re);
                    tre.add(j,num[i]);
                    tres.add(tre);
                }
            }
            res = tres;
        }
        return res;
    }
}