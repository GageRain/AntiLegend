Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 ¡ú 2
[1,3,5,6], 2 ¡ú 1
[1,3,5,6], 7 ¡ú 4
[1,3,5,6], 0 ¡ú 0

==================================

be careful of the return condition.

when low == high can't afford the condition.
l. low > high. that is to say , target is bigger than A[high], return low
2. low < high. that is to say, target is smaller than A[low], return low
so return low finally.

Solution:

public class Solution {
    public int searchInsert(int[] A, int target) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(A.length == 0){
            return 0;
        }
        int low = 0;
        int high = A.length -1;
        
        while(low <= high){
            int mid = low + (high - low) /2;
            if(A[mid] == target){
                return mid;
            }else if(A[mid] < target){
                low = mid + 1;
            }else{
                high = mid -1;
            }
        }
        return low;
    }
}